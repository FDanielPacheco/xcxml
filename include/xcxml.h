 /***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Introduction
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @file      xmlparser.h
 * 
 * @version   1.0.0
 *
 * @date      01-10-2025
 *
 * @brief     A wrapper function designed to parse xml descriptors easily.  
 *  
 * @author    Fábio D. Pacheco, 
 * @email     fabio.d.pacheco@inesctec.pt or pacheco.castro.fabio@gmail.com
 *
 * @copyright Copyright (c) [2025] [Fábio D. Pacheco]
 * 
 * @note      Manuals:
 *            https://gnome.pages.gitlab.gnome.org/libxml2/html/
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef XMLPARSER_H
#define XMLPARSER_H

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Imported libraries
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#include <stddef.h>
#include <stdint.h>

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
extern "C" {        
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 *  Data structures
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

//!< Structure used to indicate the XML parser what to look for, and where to insert the result in memory. 
typedef struct{
  const char * name;                                                           //!< The XML tree path, e.g., /root/first/second/value
  struct{
    size_t offset;                                                             //!< The memory offset from the initial of the data structure used, to the field correspondent 
    size_t size;                                                               //!< The memory size of the field pointed above
  } value;
} xml_field_t;

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 *  Macros
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief A macro used to define the tree field, the data structure type to fill, and the member from within the structure to fill
 *  
 * @param[in] path The path to the xml file.
 * @param[in] type The data structure type, e.g., struct my_custom_data.
 * @param[in] member The member within the data structure, e.g., data.value.name
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
#define XML_FIELD( path, type, member ) \
  {                                     \
    (path),                             \
    {                                   \
      offsetof( type, member ),         \
      sizeof( ( (type *) 0 )->member )  \
    }                                   \
  }                                       

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief A macro used to consult the number of elements in the XML structure `xml_field_t`.
 *  
 * @param[in] path The path to the xml file.
 * @param[in] type The data structure type, e.g., struct my_custom_data.
 * @param[in] member The member within the data structure, e.g., data.value.name
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
#define XML_ARR_SIZE( arr ) \
 ( sizeof(arr) / sizeof( (arr)[0] ) )

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Prototypes
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief The function attempts to open the `file_path` to the xml file, and looks for the `key_tree` (e.g., /first/second/third/tag).
 * Upon success, fills the `buf` variable.
 *  
 * @param[in] file_path The path to the xml file.
 * @param[in] key_tree The tag path inside the xml file (e.g., /first/second/third/tag).
 * @param[out] buf The variable to be filled with tag value.
 * @param[in] buf_len The total size of `buf`.
 * 
 * @return Upon success on finding the `key_tree`, it fills the `buf` variable, and it returns 0. \n
 * Otherwise, -1 is returned, and errno is set to indicate the error.
 *
 *  - 0: No tag found, based on `key_tree` \n
 *  - `EINVAL`: Invalid argument \n
 *  - `ENOENT`: No file was found \n
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t xml_get_value( 
  const char * file_path, 
  const char * key_tree, 
  char * buf, 
  size_t buf_len 
);


/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief The function attempts to open the XML file, read the values indicated by the `xml_fields` structure with `n_fields`.
 * And upon success fill the args with the data from the XML file.
 *  
 * @param[in] file_path The path to the xml file.
 * @param[in] xml_fields The XML fields and the structure to fill, example bellow. 
 * @param[in] n_fields The variable to be filled with tag value.
 * @param[out] args The to be filled by the parameters specified in `xml_fields` structure.
 * @param[in] args_size The `args` variable size.
 * 
 * @return Upon success, it fills the `args` variable pointed, and it returns 0. \n
 * Otherwise, -1 is returned, and errno is set to indicate the error.
 *
 *  - 0: No tag found, based on `key_tree` \n
 *  - `EINVAL`: Invalid argument \n
 *  - `ENOENT`: No file was found \n
 * 
 * @b Example
 * @code{.c}
 * typedef struct{
 *   float real;
 *   float imag;
 * } complex_t;
 * 
 * static const xml_field_t xml_fields[ ] = {
 *   XML_FIELD( 
 *     "/instance/model/variance/real", 
 *     complex_t, 
 *     real
 *   ),
 *   XML_FIELD( 
 *     "/instance/model/variance/imag", 
 *     complex_t, 
 *     imag
 *   )
 * };
 * 
 * complex_t values;
 * 
 * xml_retrive_data( 
 *   path_to_xml,
 *   xml_fields,
 *   XML_ARR_SIZE(xml_fields), 
 *   &values
 *   sizeof(complex_t)  
 * );
 * @endcode
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t xml_retrive_data( 
  const char * file_path, 
  const xml_field_t * xml_fields, 
  size_t n_fields, 
  void * args,  
  size_t args_size
);

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
}
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * End of file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
